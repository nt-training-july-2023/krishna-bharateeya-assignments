package com.nucleusteq.assessmentPlatform.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.nucleusteq.assessmentPlatform.entity.Registration;
import com.nucleusteq.assessmentPlatform.repository.RegistrationRepository;

@Service
public class RegistrationService {

	@Autowired
	RegistrationRepository registrationRepository;

	@Autowired
	PasswordEncoder passwordEncoder;

	public String addUser(Registration registration) {
		if (registration != null &&
				!registration.getName().isEmpty() &&
				!registration.getPassword().isEmpty()) {
			
					Registration newregistration = new Registration(
							0,registration.getName(),
							"user",
							registration.getEmail(),
							this.passwordEncoder.encode(registration.getPassword())
							);
		
					try {
						registrationRepository.save(newregistration);
					} catch (Exception e) {
						throw e;
					}
			return registration.getName() +" Registered Successfully";
					
		} else {
			return ("registration object cannot be null");
		}
	}

	public List<Registration> getAllRegistrations() {
		return registrationRepository.findAll();
	}
	
	
	public Map<String, String> loginUser(Registration inputregistration) {
        Map<String, String> response = new HashMap<>();

        Registration foundregistration = registrationRepository.getByEmail(inputregistration.getEmail());

        if (foundregistration != null) {
            String password = inputregistration.getPassword();
            String encodePassword = foundregistration.getPassword();

            boolean isRightPassword = passwordEncoder.matches(password, encodePassword);

            if (isRightPassword) {
                Optional<Registration> optionalregistration = registrationRepository
                        .findByEmailAndPassword(inputregistration.getEmail(), encodePassword);

                if (optionalregistration.isPresent()) {
                    response.put("status", "true");
                    response.put("role", foundregistration.getUserRole()); // Adding the user's role to the response
                } else {
                    response.put("status", "false");
                    response.put("message", "Login Failed");
                }
            } else {
                response.put("status", "false");
                response.put("message", "Password Not Match");
            }
        } else {
            response.put("status", "false");
            response.put("message", "User does not Exists");
        }

        return response;
    }

//	public String loginUser(Registration inputregistration) {
//		String msg = "";
//		Registration foundregistration = registrationRepository.getByEmail(inputregistration.getName());
//
//		if (foundregistration != null) {
//			String password = inputregistration.getPassword();
//			String encodePassword = foundregistration.getPassword();
//
//			boolean isRightPassword = passwordEncoder.matches(password, encodePassword);
//
//			if (isRightPassword) {
//				Optional<Registration> optionalregistration = registrationRepository
//						.findByEmailAndPassword(inputregistration.getName(), encodePassword);
//
//				if (optionalregistration.isPresent()) {
//					msg = "Login Successfully";
//				} else {
//					msg = "Login Failed";
//				}
//			} else {
//				msg = "Password Not Match";
//			}
//		} else {
//			msg = "User does not Exists";
//		}
//
//		return msg;
//	}

}
